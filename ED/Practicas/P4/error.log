In file included from main_dic.cpp:6:
diccionario.h:256:123: warning: friend declaration ‘bool operator!=(const Diccionario<T, U>::iterator&, const Diccionario<T, U>::iterator&)’ declares a non-template function [-Wnon-template-friend]
  256 |   friend bool operator!=(const typename Diccionario<T,U>::iterator & uno, const typename Diccionario<T,U>::iterator & otro);
      |                                                                                                                           ^
diccionario.h:256:123: note: (if this is not what you intended, make sure the function template has already been declared and add <> after the function name here) 
In file included from main_dic.cpp:6:
diccionario.h:307:135: warning: friend declaration ‘bool operator!=(const Diccionario<T, U>::const_iterator&, const Diccionario<T, U>::const_iterator&)’ declares a non-template function [-Wnon-template-friend]
  307 |   friend bool operator!=(const typename Diccionario<T,U>::const_iterator & uno, const typename Diccionario<T,U>::const_iterator & otro);
      |                                                                                                                                       ^
In file included from diccionario.h:369,
                 from main_dic.cpp:6:
diccionario.cpp: In instantiation of ‘Diccionario<T, U> Diccionario<T, U>::union_dic(const Diccionario<T, U>&) const [with T = std::__cxx11::basic_string<char>; U = std::__cxx11::basic_string<char>]’:
main_dic.cpp:68:36:   required from here
diccionario.cpp:102:45: error: no matching function for call to ‘Diccionario<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::iterator::iterator(std::_List_const_iterator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&)’
  102 |         typename Diccionario<T,U>::iterator it_dic(it);
      |                                             ^~~~~~
In file included from diccionario.h:369,
                 from main_dic.cpp:6:
diccionario.cpp:12:1: note: candidate: ‘Diccionario<T, U>::iterator::iterator(const Diccionario<T, U>::iterator&) [with T = std::__cxx11::basic_string<char>; U = std::__cxx11::basic_string<char>]’
   12 | Diccionario<T,U>::iterator::iterator(const iterator & otro):it(otro){}
      | ^~~~~~~~~~~~~~~~
diccionario.cpp:12:55: note:   no known conversion for argument 1 from ‘std::_List_const_iterator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >’ to ‘const Diccionario<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::iterator&’
   12 | Diccionario<T,U>::iterator::iterator(const iterator & otro):it(otro){}
      |                                      ~~~~~~~~~~~~~~~~~^~~~
diccionario.cpp:9:1: note: candidate: ‘Diccionario<T, U>::iterator::iterator() [with T = std::__cxx11::basic_string<char>; U = std::__cxx11::basic_string<char>]’
    9 | Diccionario<T,U>::iterator::iterator():it(){}
      | ^~~~~~~~~~~~~~~~
diccionario.cpp:9:1: note:   candidate expects 0 arguments, 1 provided
diccionario.cpp:15:1: note: candidate: ‘Diccionario<T, U>::iterator::iterator(typename std::__cxx11::list<data<T, U> >::iterator) [with T = std::__cxx11::basic_string<char>; U = std::__cxx11::basic_string<char>; typename std::__cxx11::list<data<T, U> >::iterator = std::_List_iterator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]’
   15 | Diccionario<T,U>::iterator::iterator(typename list<data<T,U>>::iterator otro):it(otro.it){}
      | ^~~~~~~~~~~~~~~~
diccionario.cpp:15:73: note:   no known conversion for argument 1 from ‘std::_List_const_iterator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >’ to ‘std::__cxx11::list<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::allocator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::iterator’ {aka ‘std::_List_iterator<data<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >’}
   15 | Diccionario<T,U>::iterator::iterator(typename list<data<T,U>>::iterator otro):it(otro.it){}
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
